%% Analyzing output of this model tracer dilution test
% TO 091205

% Interpret the results of the test. Clearly, the method of injection of
% the tracer either as uniform distribution of increase concentration at
% the entry face of the model or as mass_loading does change the tracer
% distribution in the model at different times, but does not alter the
% method of interpretation. Therefore, this intepreting script does not
% need any reference to the question on how the tracer was injected (but we
% should make sure that in either case the same overall mass has been
% injected (which we did, see mf_adapt).
%
% Clearly, the mass_laoding the tracer distribution is moredepdendent on the
% persion in all three directions. Without dispersion, there is no way for
% the mass_loaded tracer to reach all cells of the model.
%

%% load model name and basename contained in name.mat
load name
load(basename);  % this yields the stored matrices that make up the grid and the model
load underneath

%% load the unformatted files with the heads, the concentration and the budget terms

C=readMT3D('MT3D001.UCN');     C=maskHC(C,(ICBUND & IBOUND));   % read concentrations and mask inactive with NaN

B=readBud([basename,'.bgt']);  B=maskBud(B,IBOUND); % read budgetfile and mask

%% Make aviObjie
figure; hold on; view(3);
xlabel('xGr [m]'); ylabel('yGr [m]'); zlabel('z [m]');

vidObj = VideoWriter(basename);
vidObj.FrameRate = 5;
vidObj.Quality = 80;
vidObj.open();


for it=1:length(C)
    if it==1
        ht=title(sprintf('t=%g s',0));
    else
       set(ht,'string',sprintf('t=%g s',C(it).time));
   
       slice(gr.XM,gr.YM,gr.ZM,C(it).values,[],0,0); % slice is nice but colors cannot be managed   

       vidObj.writeVideo(getframe(gcf));
    end
end

vidObj.close();


%% Observations
%
% Observations time series can be generated by MT3MD directly or by using
% cObsObj objects. This can be done afterwards, using the concentration
% file that was generated by MT3DMS.

obs = cObsObj(basename,'cObs',gr,'tracer');

clrs='brgkmc';  % colors to be used in plot

figure; hold on; xlabel('time [d]'); ylabel([obs(1).compound{1} ' g/L'])
obs.plot();
     
%% Show this in 3D using transparent isosurfaces, which shows the relative
% discharge we would obtain if we put our sensor in any cell
    
figure; xlabel('x [m]'); ylabel('y [m]'); zlabel('z [m]');
title('3D view on relative discharge measured at any point from dilution test');

% first show the walls of the pipe and box by contouring its boundary,
% which is easily found by IBOUND==0 and coutouring value 0.5
patch(isosurface(gr.XM,gr.YM,gr.ZM,IBOUND==0,0.5),'edgecolor','b','facecolor','b');
view(3);     % convenient standard 3D view

alpha(0.3); % make isosurfaces trasnparent
