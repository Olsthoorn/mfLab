function [Psi,QPsi,FPsi,PsiJump]=psimeshctrd(x,y,kx,ky,Q,dddy)
% function [Psi,QPsi,FPsi,PsiJump]=psimeshctrd(x,y,kx,ky,Q,dddy)
% 2D mesh-centred finite difference model
% x,y mesh coordinates, kx,ky conductivities, Q=fixed Q (NaN for normal points) dddy is density contribution
% Psi is computed stream function matrix, QPsi density induce rotation,
% FPsi is the matrix of given Psi values, it is computed from the nodal flows matrix that was
% generated by the head model,
% PsiJump is the sum of the extraction etc. below the top row, it shows the jump in the stream functon.
% PsiJump is, therefore, needed for contouring.
% At columns where PsiJump ~= zero, Psi must be split when contouring, PsiJump is the stream function jump.
% Psi is computed Psi, we're assuming lowerleft Psi, Psi(end,1)==0!!!!! (Hence the bottom of model is closed!!!)
% TO 990510, 990606

HUGE=1e20;

x=x(:)'; y=y(:); Nx=length(x); Ny=length(y);
dx=diff(x); dy=diff(y); if y(end)<y(1), dy=-dy; end
dddy=dddy(:);

% node numbering
Nodes = reshape([1:Nx*Ny],Ny,Nx);
Il=Nodes(:,2:end);   Jl=Nodes(:,1:end-1);
Ir=Nodes(:,1:end-1); Jr=Nodes(:,2:end);
It=Nodes(2:end,:);   Jt=Nodes(1:end-1,:);
Ib=Nodes(1:end-1,:); Jb=Nodes(2:end,:);

%first compute matrix coefficients to be able to compute the boundary flow needed for psi boundary condition
%comnputes the fraction of water coming from each of the four cells around the node, based on conductivities.
k=zeros(Ny+1,Nx+1);
k(2:end-1,2:end-1)= sqrt(kx.*ky);
sumk=(k(1:end-1,1:end-1)+k(1:end-1,2:end)+k(2:end,1:end-1)+k(2:end,2:end));
frq=(k(1:end-1,1:end-1)+k(1:end-1,2:end))./sumk;
% fraction of Q for mid of cells NW, SW, SE and NE resp. (anti clockwise around node with injection Q)
%f1=Q.*k(1:end-1,1:end-1)./sumk;
%f2=Q.*k(2:end  ,1:end-1)./sumk+f1;
%f3=Q.*k(2:end  ,2:end  )./sumk+f2;
%f4=Q.*k(1:end-1,2:end  )./sumk+f3;
%Streamfunction jump Psi(right)-Psi(left) for all nodes.
PsiJump= flipud(cumsum(flipud(Q),1))-frq.*Q;

%Setting up the Psi model:
QL=PsiJump(:,1); QT=cumsum(PsiJump(1,:)); QR=PsiJump(:,end);  QL=PsiJump(end,:);
%Psimodel boundary conditions from flow, only boundary nodes
FPsi=NaN*zeros(Ny,Nx);
FPsi(:,1)=zeros(Ny,1);
FPsi(1,2:end)= -cumsum(PsiJump(1,1:end-1));
FPsi(:,end)=          -PsiJump(:,  end-1);
FPsi(end,:)=zeros(1,Nx);
FPsi=FPsi(:);

%Setting up the Psi model, matrix coefficients for the stream function.
ex= 0.5./ky.*(dy*ones(size(dx)))./(ones(size(dy))*dx);
ex=[ex;zeros(1,Nx-1)]+[zeros(1,Nx-1);ex];

ey= 0.5./kx.*(ones(size(dy))*dx)./(dy*ones(size(dx)));
eyW=[zeros(Ny-1,1),ey];
eyE=[ey,zeros(Ny-1,1)];
ey=[ey,zeros(Ny-1,1)]+[zeros(Ny-1,1),ey];

% right hand side of equations:
Qcd = diff(PsiJump,1,1);
QRHS=zeros(Ny,Nx);
QRHS(It)=QRHS(It)+eyE.*Qcd;
QRHS(Ib)=QRHS(Ib)-eyE.*Qcd;
QRHS(Ir)=QRHS(Ir)+PsiJump(Ir).*ex;
QRHS(Il)=QRHS(Il)-PsiJump(Jl).*ex;

A=-sparse([Il(:);Ir(:);It(:);Ib(:)],...
          [Jl(:);Jr(:);Jt(:);Jb(:)],...
          [ex(:);ex(:);ey(:);ey(:)],Ny*Nx,Ny*Nx,5*Ny*Nx);
Adiag= -sum(A,2);

% Boundary conditions, just Q and Fixed Heads right now
isFxd=HUGE* ~isnan(FPsi); FPsi(~isFxd)=0;

% solve Psi
Psi=spdiags(isFxd + ~isFxd.*Adiag,0,A)\(isFxd.*FPsi - ~isFxd.*(dddy - QRHS(:)));
QPsi=spdiags(Adiag,0,A)*Psi;

QPsi=reshape(QPsi,Ny,Nx);
Psi =reshape( Psi,Ny,Nx);
FPsi=reshape(FPsi,Ny,Nx);
